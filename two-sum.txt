Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

Psedo code:

Brute force approach
1. Create a for lopp to iterate the list to get the first value to compare with the second value.
2. Create a second for loop tp iterate and know the second value.
3. Then check first and second values add up to the target value.
4. Time complexity in this case id O(n2) (O of n square) as we are iterating twice in the loop.

Better approach: 
1. Use hash map (Key value pair concept). 
2. If x+y = target, Then x = (target - y). So, we can iterate the map of numbers once, to know the target - nums[i].
3. So, the time complexity in this case is O(n). 

Code: 

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>(); // Creating a hash map
        for(int i=0;i<nums.length;i++){   // Iterating through the list.
           if(map.containsKey(target - nums[i])) {  // Checking if the key of the map contains the (target - y) value.
             return new int[] { i, map.get(target - nums[i])}; //  Returning the indices of the pair which meets the target value.
           }
            map.put(nums[i], i); 
        }
        return new int[0];
    }
}
